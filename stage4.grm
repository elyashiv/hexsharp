"Name" = 'Sharp Grammar'
"Version" = '1.0'
"Author" = 'Michael Bebenita'
"Case Sensitive" = 'True'

"Start Symbol" = <Module>

! Scanner Rules
{ALPHA_NUMERIC} = {DIGIT} + {LETTER}
{HEX_DIGIT} = {DIGIT} + [abcdef] + [ABCDEF]
{String Char} = {Printable} - ["]

! Identifiers must start with a letter followed any amount of letters, digits or underscores.

identifier                   = {LETTER}({ALPHA_NUMERIC} | _)*

! Literals may be either true or false, integers, real numbers, or characters.

boolean_literal            = (true)|(false)
integer_literal            = ({DIGIT}+) | (0x{HEX_DIGIT}+)
real_literal               = {DIGIT}*'.'{DIGIT}+f
character_literal          = ''{LETTER}''
string_literal             = '"'{String Char}*'"'

<Literal>                  ::= boolean_literal
                             | integer_literal  
                             | real_literal 
                             | character_literal
                             | string_literal
!! Types
<Type>                     ::= <Structure_Type>
                             | <Primitive_Type>
                             | <Array_Type>

<Structure_Type>           ::= identifier
<Primitive_Type>           ::= bool
                             | int
                             | real
                             | char
                             | void
<Array_Type>               ::= <Structure_Type> '[' ']'
                             | <Primitive_Type> '[' ']'
!!
!! Global stuff. Module and body declaration.
!!

<Module>                   ::= module identifier <Body>

<Body>                     ::= '{' <Statements> '}'
                             | '{' '}'

<Name>                     ::= identifier
                             | <Name> '.' identifier
!!
!! Variable stuff.
!!

<Variable_Declarations>    ::= <Variable_Declaration>
                             | <Variable_Declarations> <Variable_Declaration>

<Variable_Declaration>     ::= <Type> identifier ';'
                             | <Type> identifier '=' <Expression> ';'
                             | <Type> identifier '=' 'new' '[' <Expression> ']' ';'
                             | <Type> identifier '=' '{' <Elements> '}' ';'

<Elements>                 ::= <Element>
                             | <Elements> ',' <Element>
<Element>                  ::= <Expression>
                             | '{' <Elements> '}'

!!
!! Function stuff.
!!

<Function_Call>            ::= <Name> '(' ')'
                             | <Name> '(' <Arguments> ')'

<Arguments>                ::= <Argument> 
                             | <Arguments> ',' <Argument> 

<Argument>                 ::= <Expression>
                             | ref <Expression>

!!
!! Statements
!!

<Statements>               ::= <Statement>
                             | <Statements> <Statement>

<Statement>                ::= <Variable_Declaration>
                             | <Function_Call> ';'
                             | <Assignment> ';'
                             | return <Expression> ';'
                             | return ';'
                             | if '(' <Expression> ')' <Body>
                             | if '(' <Expression> ')' <Body> else <Body>
                             | while '(' <Expression> ')' <Body>
                             | do <Body> while '(' <Expression> ')'
                             | for '(' <Assignment> ';' <Expression> ';' <Assignment> ')' <Body>

!
! Expressions
!

<Assignment>               ::= set <Name> '=' <Expression>
                             | set <Name> '[' <Expression> ']' '=' <Expression>
                             | set <Name> '++'
                             | set <Name> '--'

<Expression>               ::= <Expression_Term>
                             | <Expression> '+' <Expression_Term>
                             | <Expression> '-' <Expression_Term>
                                   
<Expression_Term>          ::= <Expression_Factor>
                             | <Expression_Term> '*' <Expression_Factor>
                             | <Expression_Term> '/' <Expression_Factor>

<Expression_Factor>        ::= <Expression_Binary>
                             | <Expression_Factor> '%' <Expression_Binary>
                             | <Expression_Factor> '>' <Expression_Binary>
                             | <Expression_Factor> '<' <Expression_Binary>
                             | <Expression_Factor> '>=' <Expression_Binary>
                             | <Expression_Factor> '<=' <Expression_Binary>
                             | <Expression_Factor> '==' <Expression_Binary>
                             | <Expression_Factor> '!=' <Expression_Binary>

<Expression_Binary>        ::= <Expression_Unary>
                             | <Expression_Binary> '&&' <Expression_Unary>
                             | <Expression_Binary> '||' <Expression_Unary>

<Expression_Unary>         ::= '+' <Expression_Primary>
                             | '-' <Expression_Primary>
                             | '!' <Expression_Primary>
                             | <Expression_Primary> 
                             | <Expression_Primary> '[' <Expression> ']'

<Expression_Primary>       ::= <Name>
                             | <Function_Call>
                             | <Literal>
                             | '(' <Expression> ')'
