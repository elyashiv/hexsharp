"Name" = 'Sharp Grammar'
"Version" = '1.0'
"Author" = 'Michael Bebenita'
"Case Sensitive" = 'True'

"Start Symbol" = <Expression>

! Scanner Rules
{ALPHA_NUMERIC} = {DIGIT} + {LETTER}
{HEX_DIGIT} = {DIGIT} + [abcdef] + [ABCDEF]
{String Char} = {Printable} - ["]

! Literals may be either true or false, integers, real numbers, or characters.

boolean_literal            = (true)|(false)
integer_literal            = ({DIGIT}+) | (0x{HEX_DIGIT}+)
real_literal               = {DIGIT}*'.'{DIGIT}+f
character_literal          = ''{LETTER}''
string_literal             = '"'{String Char}*'"'

<Literal>                  ::= boolean_literal
                             | integer_literal  
                             | real_literal 
                             | character_literal
                             | string_literal
!! expressions
<Expression>               ::= <Expression_Term>
                             | <Expression> '+' <Expression_Term>
                             | <Expression> '-' <Expression_Term>
                                   
<Expression_Term>          ::= <Expression_Factor>
                             | <Expression_Term> '*' <Expression_Factor>
                             | <Expression_Term> '/' <Expression_Factor>

<Expression_Factor>        ::= <Expression_Binary>
                             | <Expression_Factor> '%' <Expression_Binary>
                             | <Expression_Factor> '>' <Expression_Binary>
                             | <Expression_Factor> '<' <Expression_Binary>
                             | <Expression_Factor> '>=' <Expression_Binary>
                             | <Expression_Factor> '<=' <Expression_Binary>
                             | <Expression_Factor> '==' <Expression_Binary>
                             | <Expression_Factor> '!=' <Expression_Binary>

<Expression_Binary>        ::= <Expression_Unary>
                             | <Expression_Binary> '&&' <Expression_Unary>
                             | <Expression_Binary> '||' <Expression_Unary>

<Expression_Unary>         ::= '+' <Expression_Primary>
                             | '-' <Expression_Primary>
                             | '!' <Expression_Primary>
                             | <Expression_Primary> 

<Expression_Primary>       ::= <Literal>
                             | '(' <Expression> ')'
